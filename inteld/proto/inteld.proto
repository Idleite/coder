
syntax = "proto3";
option go_package = "github.com/coder/coder/v2/inteld/proto";

package inteld;

message Empty {}

message Executable {
	string hash = 1;
	string basename = 2;
	string path = 3;
	// Version is a per-tool extracted version string.
	// e.g. go1.26.4
	string version = 4;
}

// Invocation is a message that represents a single invocation of an executable.
message Invocation {
	Executable executable = 1;
	repeated string arguments = 2;
	int64 duration_ms = 3;
	int32 exit_code = 4;
	string working_directory = 5;
	string git_remote_url = 6;
}

message ReportPathRequest {
	repeated Executable executables = 1;
}

message RecordInvocationRequest {
	repeated Invocation invocations = 1;
}

message InstalledSoftware {
	bool docker_desktop = 1;
	bool docker_desktop_enterprise = 2;
	bool vscode = 3;
	bool vscode_insiders = 4;
	bool jetbrains_intellij = 5;
	bool jetbrains_gateway = 6;
}

message ListenRequest {
	InstalledSoftware installed_software = 1;
}

// SystemResponse is a message that the client streams to
// the daemon. It notifies of new tracking requests.
message SystemResponse {
	oneof message {
		TrackExecutables track_executables = 1;
	}
}

// TrackExecutables is a message that tells the daemon to track
// the executables with the given names.
message TrackExecutables {
	repeated string binary_name = 1;
}

// IntelDaemon is the daemon interface that communicates
// with coderd.
service IntelDaemon {
	// Listen begins a stream of SystemResponse messages.
	// It also updates some basic information about the host.
	rpc Listen(ListenRequest) returns (stream SystemResponse);

	rpc RecordInvocation(RecordInvocationRequest) returns (Empty);
	rpc ReportPath(ReportPathRequest) returns (Empty);
}

// ReportInvocationRequest is sent as bytes for speed from
// the slim invoke binary to the daemon.
message ReportInvocationRequest {
	string executable_path = 1;
	repeated string arguments = 2;
	int64 duration_ms = 3;
	int32 exit_code = 4;
	string working_directory = 5;
}
